BELOW ARE EXAMPLES OF ANOMALOUS OUTPUT THAT MAY RESULT FROM RUNNING THE EXAMPLE map_accumulator_bad.
====================================================================================================

[09:43:48]pvillela@i16-5620:~/DEV/Rust/thread-local-drop(main)$ cargo run --example map_accumulator
   Compiling thread-local-drop v0.1.0 (/home/pvillela/DEV/Rust/thread-local-drop)
    Finished dev [unoptimized + debuginfo] target(s) in 0.95s
     Running `target/debug/examples/map_accumulator`
[2023-08-28T13:44:14Z TRACE thread_local_drop::thread_local_drop] thread id ThreadId(1) registered
Main thread after inserts: local map for thread id=ThreadId(1): Holder{data: RefCell { value: Some({2: Foo("b"), 1: Foo("a")}) }}
[2023-08-28T13:44:14Z TRACE thread_local_drop::thread_local_drop] thread id ThreadId(2) registered
Spawned thread before sleep: local map for thread id=ThreadId(2): Holder{data: RefCell { value: Some({1: Foo("aa")}) }}
Main thread after sleep: control=Control(Mutex { data: Accumulator { tmap: {ThreadId(1): 140429384673144, ThreadId(2): 140429381072248}, acc: {} }, poisoned: false, .. })
[2023-08-28T13:44:14Z TRACE thread_local_drop::thread_local_drop] entered `ensure_tls_dropped`
[2023-08-28T13:44:14Z TRACE thread_local_drop::thread_local_drop] executing `ensure_tls_dropped` for key=ThreadId(1)
`op` called from ThreadId(1) with data {2: Foo("b"), 1: Foo("a")}
[2023-08-28T13:44:14Z TRACE thread_local_drop::thread_local_drop] executing `ensure_tls_dropped` for key=ThreadId(2)
`op` called from ThreadId(1) with data {1: Foo("aa")}
After 1st call to `ensure_tls_dropped`: control=Control(Mutex { data: Accumulator { tmap: {}, acc: {ThreadId(1): {1: Foo("a"), 2: Foo("b")}, ThreadId(2): {1: Foo("aa")}} }, poisoned: false, .. })
Spawned thread after sleep and additional insert: local map for thread id=ThreadId(2): Holder{data: RefCell { value: Some({2: Foo("bb")}) }}
After spawned thread join: control=Control(Mutex { data: Accumulator { tmap: {}, acc: {ThreadId(1): {1: Foo("a"), 2: Foo("b")}, ThreadId(2): {1: Foo("aa")}} }, poisoned: false, .. })
[2023-08-28T13:44:14Z TRACE thread_local_drop::thread_local_drop] entered `drop` for Holder on thread ThreadId(2)
[2023-08-28T13:44:14Z TRACE thread_local_drop::thread_local_drop] `drop` acquiring control lock on thread ThreadId(2)
[2023-08-28T13:44:14Z TRACE thread_local_drop::thread_local_drop] entered `ensure_tls_dropped`
[2023-08-28T13:44:14Z TRACE thread_local_drop::thread_local_drop] `drop` acquired control lock on thread ThreadId(2)
[2023-08-28T13:44:14Z TRACE thread_local_drop::thread_local_drop] exited `ensure_tls_dropped` with no keys to drop
After 2nd call to `ensure_tls_dropped`: control=Control(Mutex { data: <locked>, poisoned: false, .. })
thread 'main' panicked at '[2023-08-28T13:44:14Z TRACE thread_local_drop::thread_local_drop] `drop` removed entry None for thread ThreadId(2), control={}
called `Result::unwrap()` on an `Err` value: "WouldBlock"', examples/map_accumulator.rs`op` called from ThreadId(2) with data {2: Foo("bb")}
:97:37
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
[2023-08-28T13:44:14Z TRACE thread_local_drop::thread_local_drop] entered `drop` for Holder on thread ThreadId(1)
[2023-08-28T13:44:14Z TRACE thread_local_drop::thread_local_drop] exiting `drop` for Holder on thread ThreadId(1) because data is None



[09:49:45]pvillela@i16-5620:~/DEV/Rust/thread-local-drop(main)$ cargo run --example map_accumulator
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/examples/map_accumulator`
[2023-08-28T13:49:47Z TRACE thread_local_drop::thread_local_drop] thread id ThreadId(1) registered
Main thread after inserts: local map for thread id=ThreadId(1): Holder{data: RefCell { value: Some({2: Foo("b"), 1: Foo("a")}) }}
[2023-08-28T13:49:47Z TRACE thread_local_drop::thread_local_drop] thread id ThreadId(2) registered
Spawned thread before sleep: local map for thread id=ThreadId(2): Holder{data: RefCell { value: Some({1: Foo("aa")}) }}
Main thread after sleep: control=Control(Mutex { data: Accumulator { tmap: {ThreadId(2): 139729880216952, ThreadId(1): 139729884014456}, acc: {} }, poisoned: false, .. })
[2023-08-28T13:49:47Z TRACE thread_local_drop::thread_local_drop] entered `ensure_tls_dropped`
[2023-08-28T13:49:47Z TRACE thread_local_drop::thread_local_drop] executing `ensure_tls_dropped` for key=ThreadId(2)
`op` called from ThreadId(1) with data {1: Foo("aa")}
[2023-08-28T13:49:47Z TRACE thread_local_drop::thread_local_drop] executing `ensure_tls_dropped` for key=ThreadId(1)
`op` called from ThreadId(1) with data {2: Foo("b"), 1: Foo("a")}
After 1st call to `ensure_tls_dropped`: control=Control(Mutex { data: Accumulator { tmap: {}, acc: {ThreadId(1): {2: Foo("b"), 1: Foo("a")}, ThreadId(2): {1: Foo("aa")}} }, poisoned: false, .. })
Spawned thread after sleep and additional insert: local map for thread id=ThreadId(2): Holder{data: RefCell { value: Some({2: Foo("bb")}) }}
After spawned thread join: control=Control(Mutex { data: Accumulator { tmap: {}, acc: {ThreadId(1): {2: Foo("b"), 1: Foo("a")}, ThreadId(2): {1: Foo("aa")}} }, poisoned: false, .. })
[2023-08-28T13:49:48Z TRACE thread_local_drop::thread_local_drop] entered `ensure_tls_dropped`
[2023-08-28T13:49:48Z TRACE thread_local_drop::thread_local_drop] entered `drop` for Holder on thread ThreadId(2)
[2023-08-28T13:49:48Z TRACE thread_local_drop::thread_local_drop] exited `ensure_tls_dropped` with no keys to drop
After 2nd call to `ensure_tls_dropped`: control=Control(Mutex { data: Accumulator { tmap: {}, acc: {ThreadId(1): {2: Foo("b"), 1: Foo("a")}, ThreadId(2): {1: Foo("aa")}} }, poisoned: false, .. })
[2023-08-28T13:49:48Z TRACE thread_local_drop::thread_local_drop] `drop` acquiring control lock on thread ThreadId(2)
accumulated={ThreadId(1): {2: Foo("b"), 1: Foo("a")}, ThreadId(2): {1: Foo("aa")}}
[2023-08-28T13:49:48Z TRACE thread_local_drop::thread_local_drop] `drop` acquired control lock on thread ThreadId(2)
[2023-08-28T13:49:48Z TRACE thread_local_drop::thread_local_drop] `drop` removed entry None for thread ThreadId(2), control={}
`op` called from ThreadId(2) with data {2: Foo("bb")}
[2023-08-28T13:49:48Z TRACE thread_local_drop::thread_local_drop] entered `drop` for Holder on thread ThreadId(1)
[2023-08-28T13:49:48Z TRACE thread_local_drop::thread_local_drop] exiting `drop` for Holder on thread ThreadId(1) because data is None



[09:49:50]pvillela@i16-5620:~/DEV/Rust/thread-local-drop(main)$ cargo run --example map_accumulator
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/examples/map_accumulator`
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] thread id ThreadId(1) registered
Main thread after inserts: local map for thread id=ThreadId(1): Holder{data: RefCell { value: Some({2: Foo("b"), 1: Foo("a")}) }}
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] thread id ThreadId(2) registered
Spawned thread before sleep: local map for thread id=ThreadId(2): Holder{data: RefCell { value: Some({1: Foo("aa")}) }}
Main thread after sleep: control=Control(Mutex { data: Accumulator { tmap: {ThreadId(1): 140161896343416, ThreadId(2): 140161893528952}, acc: {} }, poisoned: false, .. })
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] entered `ensure_tls_dropped`
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] executing `ensure_tls_dropped` for key=ThreadId(1)
`op` called from ThreadId(1) with data {2: Foo("b"), 1: Foo("a")}
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] executing `ensure_tls_dropped` for key=ThreadId(2)
`op` called from ThreadId(1) with data {1: Foo("aa")}
After 1st call to `ensure_tls_dropped`: control=Control(Mutex { data: Accumulator { tmap: {}, acc: {ThreadId(1): {2: Foo("b"), 1: Foo("a")}, ThreadId(2): {1: Foo("aa")}} }, poisoned: false, .. })
Spawned thread after sleep and additional insert: local map for thread id=ThreadId(2): Holder{data: RefCell { value: Some({2: Foo("bb")}) }}
After spawned thread join: control=Control(Mutex { data: Accumulator { tmap: {}, acc: {ThreadId(1): {2: Foo("b"), 1: Foo("a")}, ThreadId(2): {1: Foo("aa")}} }, poisoned: false, .. })
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] entered `ensure_tls_dropped`
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] entered `drop` for Holder on thread ThreadId(2)
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] exited `ensure_tls_dropped` with no keys to drop
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] `drop` acquiring control lock on thread ThreadId(2)
After 2nd call to `ensure_tls_dropped`: control=Control(Mutex { data: Accumulator { tmap: {}, acc: {ThreadId(1): {2: Foo("b"), 1: Foo("a")}, ThreadId(2): {1: Foo("aa")}} }, poisoned: false, .. })
accumulated={ThreadId(1): {2: Foo("b"), 1: Foo("a")}, ThreadId(2): {1: Foo("aa")}}
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] `drop` acquired control lock on thread ThreadId(2)
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] `drop` removed entry None for thread ThreadId(2), control={}
`op` called from ThreadId(2) with data {2: Foo([2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] entered `drop` for Holder on thread ThreadId(1)
"bb")}
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] exiting `drop` for Holder on thread ThreadId(1) because data is None



[09:49:50]pvillela@i16-5620:~/DEV/Rust/thread-local-drop(main)$ cargo run --example map_accumulator
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/examples/map_accumulator`
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] thread id ThreadId(1) registered
Main thread after inserts: local map for thread id=ThreadId(1): Holder{data: RefCell { value: Some({2: Foo("b"), 1: Foo("a")}) }}
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] thread id ThreadId(2) registered
Spawned thread before sleep: local map for thread id=ThreadId(2): Holder{data: RefCell { value: Some({1: Foo("aa")}) }}
Main thread after sleep: control=Control(Mutex { data: Accumulator { tmap: {ThreadId(1): 140161896343416, ThreadId(2): 140161893528952}, acc: {} }, poisoned: false, .. })
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] entered `ensure_tls_dropped`
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] executing `ensure_tls_dropped` for key=ThreadId(1)
`op` called from ThreadId(1) with data {2: Foo("b"), 1: Foo("a")}
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] executing `ensure_tls_dropped` for key=ThreadId(2)
`op` called from ThreadId(1) with data {1: Foo("aa")}
After 1st call to `ensure_tls_dropped`: control=Control(Mutex { data: Accumulator { tmap: {}, acc: {ThreadId(1): {2: Foo("b"), 1: Foo("a")}, ThreadId(2): {1: Foo("aa")}} }, poisoned: false, .. })
Spawned thread after sleep and additional insert: local map for thread id=ThreadId(2): Holder{data: RefCell { value: Some({2: Foo("bb")}) }}
After spawned thread join: control=Control(Mutex { data: Accumulator { tmap: {}, acc: {ThreadId(1): {2: Foo("b"), 1: Foo("a")}, ThreadId(2): {1: Foo("aa")}} }, poisoned: false, .. })
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] entered `ensure_tls_dropped`
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] entered `drop` for Holder on thread ThreadId(2)
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] exited `ensure_tls_dropped` with no keys to drop
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] `drop` acquiring control lock on thread ThreadId(2)
After 2nd call to `ensure_tls_dropped`: control=Control(Mutex { data: Accumulator { tmap: {}, acc: {ThreadId(1): {2: Foo("b"), 1: Foo("a")}, ThreadId(2): {1: Foo("aa")}} }, poisoned: false, .. })
accumulated={ThreadId(1): {2: Foo("b"), 1: Foo("a")}, ThreadId(2): {1: Foo("aa")}}
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] `drop` acquired control lock on thread ThreadId(2)
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] `drop` removed entry None for thread ThreadId(2), control={}
`op` called from ThreadId(2) with data {2: Foo([2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] entered `drop` for Holder on thread ThreadId(1)
"bb")}
[2023-08-28T13:49:53Z TRACE thread_local_drop::thread_local_drop] exiting `drop` for Holder on thread ThreadId(1) because data is None

